import scanpy as sc
from matplotlib import pyplot as plt
plt.rcParams["figure.figsize"] = [6, 4]
sc.set_figure_params(dpi=100)
import warnings
warnings.filterwarnings("ignore")
from scimilarity.utils import lognorm_counts, align_dataset
from scimilarity import CellQuery
model_path = "/home/ec2-user/scimilarity/model_v1.1"
cq = CellQuery(model_path)
print(dir(cq))
print(cq.cell_metadata)
print(cq.study_sample_index)

data_path = "/home/ec2-user/scimilarity/SeuratProject_updated.h5ad"
adams = sc.read(data_path)
adams = align_dataset(adams, cq.gene_order)
adams = lognorm_counts(adams)
data_path = "/home/ec2-user/scimilarity/GSE136831_subsample.h5ad"
Demo = sc.read(data_path)
print(Demo) 
print(adams) 
# Print basic statistics for adams.X
print("Min:", adams.X.min())
print("Max:", adams.X.max())
print("Mean:", adams.X.mean())
print("Mean:", Demo.X.mean())
print("Mean:", Demo.X.max())
# Add raw counts to a new layer called "counts"
adams.layers["counts"] = adams.X.copy()
adams = lognorm_counts(adams)
print("Max:", adams.X.max())
print("Max:", adams.X.min())
adams.obsm["X_scimilarity"] = cq.get_embeddings(adams.X)
sc.pp.neighbors(adams, use_rep="X_scimilarity")
sc.tl.umap(adams)
sc.pl.umap(adams, color="celltype_raw", legend_fontsize=5, save=“umap123.png")
sc.pl.umap(adams, color="celltype_raw", legend_fontsize=5, save="_umap123.png")
print(adams.obs.columns)
sc.pl.umap(adams, color="labels.main", legend_fontsize=5, save="_umap123.png")
adams
Demo
Demo.obsm["X_scimilarity"] = cq.get_embeddings(Demo.X)
sc.pp.neighbors(Demo, use_rep="X_scimilarity")
Demo = lognorm_counts(Demo)
Demo
Demo.obsm["X_scimilarity"] = cq.get_embeddings(Demo.X)
Demo = align_dataset(Demo, cq.gene_order)
Demo
Demo = lognorm_counts(Demo)
Demo.obsm["X_scimilarity"] = cq.get_embeddings(Demo.X)
Demo
sc.pp.neighbors(Demo, use_rep="X_scimilarity")
sc.tl.umap(Demo)
Demo
adams
fm_basic_signature = [“CD14”, “CXCL10”, “B2M“, “IRF1”, “IFIT2”, “CD86”]
fm_basic_signature = ["CD14", "CXCL10", "B2M", "IRF1", "IFIT2", "CD86"]
sc.tl.score_genes(adams, fm_basic_signature)
adams
sig_query_threshold = adams.obs.score.quantile(0.999)
cells_used_in_query = adams.obs.score >= sig_query_threshold
adams
sig_query_threshold
cells_used_in_query
adams.obs["used_in_query"] = cells_used_in_query
adams
from scimilarity.utils import get_centroid
adams.obs["used_in_query"]
adams.obs["used_in_query"].sum()
avg_cell = get_centroid(adams.layers["counts"][adams.obs["used_in_query"]])
avg_embedding = cq.get_embeddings(avg_cell)
adams
avg_embedding
pos = adams[adams.obs.score >= sig_query_threshold]
pos
neg = sc.pp.subsample(
    adams[adams.obs.score < sig_query_threshold],
    n_obs=len(pos),
    random_state=0,
    copy=True,
)
neg
explainer = Interpreter(cq.model, cq.gene_order)
from scimilarity import CellQuery, align_dataset, Interpreter
explainer = Interpreter(cq.model, cq.gene_order)
explainer
attrs = explainer.get_attributions(pos.X, neg.X)
attrs_df = explainer.get_ranked_genes(attrs)
attrs_df
explainer.plot_ranked_genes(attrs_df, n_plot=25, save = "attr.png")
meta = cq.cell_metadata
from scimilarity.ontologies import (
    import_cell_ontology,
    get_id_mapper,
    get_all_descendants,
)
onto = import_cell_ontology(url="http://purl.obolibrary.org/obo/cl/cl-basic.obo")
id2name = get_id_mapper(onto)
mono_descendents = get_all_descendants(onto, "CL:0000576", inclusive=True)
mac_descendents = get_all_descendants(onto, "CL:0000235", inclusive=True)
microglia_descendents = get_all_descendants(onto, "CL:0000129", inclusive=True)
momac_ids = pd.Index((mono_descendents | mac_descendents) - microglia_descendents)
momac_cell_types = momac_ids.map(id2name)
mono_descendents
momac_ids = pd.Index((mono_descendents | mac_descendents) - microglia_descendents)
import scanpy as sc
import numpy as np
import pandas as pd
sc.set_figure_params(dpi=100)
momac_ids = pd.Index((mono_descendents | mac_descendents) - microglia_descendents)
momac_cell_types = momac_ids.map(id2name)
momac_cell_types
momac_inds = meta.prediction.isin(momac_cell_types)
in_vitro_inds = (meta["in_vivo"] == "False").values
in_vitro_momac_inds = momac_inds & in_vitro_inds
momac_meta = meta[in_vitro_momac_inds]
momac_embeddings = cq.get_precomputed_embeddings(np.where(in_vitro_momac_inds)[0])
momac_embeddings.shape
momac_embeddings
mac_distances = 1 - (momac_embeddings @ avg_embedding.T).flatten()
mac_distances
momac_meta["distance"] = mac_distances
momac_meta["similarity"] = 1 / mac_distances
momac_meta["sample"] = pd.Categorical(momac_meta["sample"])
momac_meta
cell_counts_per_sample = momac_meta.groupby("sample").size()
samples_w_enough_cells = cell_counts_per_sample[cell_counts_per_sample > 25].index
momac_meta = momac_meta[momac_meta["sample"].isin(samples_w_enough_cells)]
momac_meta["sample"] = momac_meta["sample"].cat.remove_unused_categories()
import seaborn as sns
from matplotlib import pyplot as plt
sample_order = list(
    momac_meta.groupby("sample")["similarity"].quantile(0.9).sort_values().index
)
momac_meta["sample"] = pd.Categorical(
    momac_meta["sample"], categories=sample_order, ordered=True
)
momac_meta["numeric_sample"] = momac_meta["sample"].cat.codes
jitter_strength = 0.1
momac_meta["jittered_sample"] = momac_meta["numeric_sample"] + np.random.uniform(
    -jitter_strength, jitter_strength, size=len(momac_meta)
)
sns.set(font_scale=0.6)
plt.figure(figsize=(15, 7))
ax = sns.scatterplot(
    data=momac_meta,
    x="jittered_sample",
    y="similarity",
    hue="similarity",
    palette="viridis",
    linewidth=0,
    size=0.1,
    alpha=0.5,
)
ax.set_yscale("log", base=2)
ax.legend().set_visible(False)
ax.set_yticks([2, 4, 8, 16, 32, 64])
ax.set_yticklabels(["2", "4", "8", "16", "32", "64"])
# Set the x-ticks based on the desired order
ax.set_xticks(range(len(sample_order)))
ax.set_xticklabels(sample_order, rotation=90)
ax.set_xlabel("");
plt.savefig("similarity_scatterplot.png", dpi=300, bbox_inches="tight")
plt.close() 
%history -f session_history.py
history -f session_history.py
import readline
# Save history to a text file at the end of the session
with open("session_history.txt", "w") as f:
    for i in range(readline.get_current_history_length()):
        f.write(readline.get_history_item(i + 1) + "\n")
)
with open("session_history.txt", "w") as f:
for i in range(readline.get_current_history_length()):
import readline
# Save history to a text file at the end of the session
with open("session_history.txt", "w") as f:
    for i in range(readline.get_current_history_length()):
        f.write(readline.get_history_item(i + 1) + "\n")
